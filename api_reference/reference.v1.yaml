openapi: 3.0.0
info:
  title: reference
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  /projects/:
    get:
      summary: List user projects
      tags: []
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectShort'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
      operationId: get-projects
      description: List all the projects the current user is a member of
      parameters:
        - schema:
            type: string
          in: query
          name: search
          description: a string to search project names
    post:
      summary: Create a new project
      tags: []
      responses: {}
      operationId: post-projects
      description: ''
    parameters: []
  '/projects/{projectId}':
    parameters:
      - schema:
          type: string
        name: projectId
        in: path
        required: true
    delete:
      summary: Delete a project
      operationId: delete-projects-projectId
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: You must be a project admin in order to delete the project.
    put:
      summary: Update project info
      operationId: put-projects-projectId
      responses:
        '200':
          description: OK
  '/projects/{projectId}/members/':
    parameters:
      - schema:
          type: string
        name: projectId
        in: path
        required: true
    get:
      summary: List all members of the project
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectMember'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-projects-projectId-members
      description: 'List the memebers of the project, including yourself.'
    delete:
      summary: Remove a member from the project
      operationId: delete-projects-projectId-members
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: |-
        Remove a member from a project.
        Project admin only.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type:
                    - string
                    - number
              required:
                - id
        description: The id of the user to remove from the project.
  '/projects/{projectId}/members/admin':
    parameters:
      - schema:
          type: string
        name: projectId
        in: path
        required: true
    post:
      summary: Promote a member to project admin
      tags: []
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: post-projects-projectId-members-admin
      description: |-
        Promote a member to project admin. 
        **If the user is already a project admin nothing happens and 200 OK is returned.**
        The user must be a member of the project.
        Project admin only.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type:
                    - string
                    - number
              required:
                - id
    delete:
      summary: 'Remove admin privileges '
      tags: []
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: delete-projects-projectId-members-admin
      description: |-
        Remove admin privileges from the given project member.
        Project Admin only.
        **If there's only one project admin and you try to remove them Error 400 will be returned.**
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type:
                    - string
                    - number
              required:
                - id
components:
  schemas:
    UserProfile:
      description: ''
      type: object
      title: User Profile
      x-examples:
        example-1:
          id: '1'
          firstName: string
          lastName: string
          proffesion: string
          birth: 1999/01/29
          studies: string
          city: string
          email: string
          avatar: null
      properties:
        id:
          type:
            - string
            - number
        name:
          type: string
        surname:
          type: string
        proffesion:
          type: string
          nullable: true
        birthDate:
          type: string
          minLength: 1
          format: date
        studies:
          type: string
          nullable: true
        residence:
          type: string
          nullable: true
        email:
          type: string
          minLength: 1
          format: email
        picture:
          type: string
          format: uri
          nullable: true
      required:
        - id
        - name
        - surname
        - proffesion
        - birthDate
        - studies
        - residence
        - email
        - picture
    ProjectMember:
      description: User representation used in project members list.
      type: object
      title: Project Member
      x-examples:
        example-1:
          id: 1
          firstName: string
          lastName: string
          email: user@example.com
          admin: true
          avatar: 'http://example.com'
      properties:
        id:
          type:
            - string
            - number
        name:
          type: string
        surname:
          type: string
        email:
          type: string
          format: email
        admin:
          type: boolean
        picture:
          type: string
          format: uri
          nullable: true
      required:
        - id
        - name
        - surname
        - email
        - admin
        - picture
    ProjectShort:
      title: Project Short
      type: object
      description: Minimal info about a project
      properties:
        id:
          type:
            - string
            - number
        name:
          type: string
        members:
          type:
            - string
            - array
          items:
            $ref: '#/components/schemas/ProjectMemberShort'
      required:
        - id
        - name
        - members
      x-examples:
        example-1:
          id: 2
          name: string
          members:
            - id: 1
              firstName: Manolis
              lastName: Skouris
              admin: true
              avatar: null
    ProjectMemberShort:
      title: Project Member Short
      type: object
      description: A user profile but without the email
      x-examples:
        example-1:
          id: 1
          firstName: string
          lastName: string
          admin: true
          avatar: null
      properties:
        id:
          type:
            - string
            - integer
        name:
          type: string
        surname:
          type: string
        admin:
          type: boolean
        picture:
          type: string
          format: uri
          nullable: true
      required:
        - id
        - name
        - surname
        - admin
        - picture
  securitySchemes: {}
